/* tslint:disable */
/* eslint-disable */
/**
 * Tickets API
 * REST API для управления билетами, людьми, событиями и площадками.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloneRequest } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SellRequestDTO } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
// @ts-ignore
import type { Ticket } from '../models';
/**
 * TicketsApi - axios parameter creator
 * @export
 */
export const TicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Обновить билет по ID
         * @summary Обновить билет
         * @param {number} id
         * @param {Ticket} ticket
         * @param {*} [options]
         */
        updateTicket: async (id: number, ticket: Ticket, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('updateTicket', 'id', id);
            assertParamExists('updateTicket', 'ticket', ticket);
            const localVarPath = `/update_ticket/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) baseOptions = configuration.baseOptions;

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(ticket, localVarRequestOptions, configuration);

            return { url: toPathString(localVarUrlObj), options: localVarRequestOptions };
        },

        /**
         * 
         * @summary Создать билет
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTicket: async (ticket: Ticket, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticket' is not null or undefined
            assertParamExists('addTicket', 'ticket', ticket)
            const localVarPath = `/add_ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticket, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Клонировать билет как VIP (цена ×2)
         * @param {CloneRequest} cloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneVip: async (cloneRequest: CloneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cloneRequest' is not null or undefined
            assertParamExists('cloneVip', 'cloneRequest', cloneRequest)
            const localVarPath = `/clone_vip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Подсчёт билетов с comment лексикографически меньше данного
         * @param {string} comment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCommentLess: async (comment: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'comment' is not null or undefined
            assertParamExists('countCommentLess', 'comment', comment)
            const localVarPath = `/count_comment_less`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Массовое удаление билетов по точному совпадению comment
         * @param {string} commentEq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByComment: async (commentEq: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentEq' is not null or undefined
            assertParamExists('deleteByComment', 'commentEq', commentEq)
            const localVarPath = `/delete_by_comment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (commentEq !== undefined) {
                localVarQueryParameter['commentEq'] = commentEq;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicket: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTicket', 'id', id)
            const localVarPath = `/delete_ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTicketById', 'id', id)
            const localVarPath = `/get_ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список билетов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTickets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/get_tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Билет с минимальным ID события
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minEventTicket: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/min_event_ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Продать билет пользователю
         * @param {SellRequestDTO} sellRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellTicket: async (sellRequestDTO: SellRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellRequestDTO' is not null or undefined
            assertParamExists('sellTicket', 'sellRequestDTO', sellRequestDTO)
            const localVarPath = `/sell_ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sellRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Поток серверных событий об изменениях сущностей.
         * @summary Подписка на события (SSE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamTickets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketsApi - functional programming interface
 * @export
 */
export const TicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketsApiAxiosParamCreator(configuration)
    return {

        /**
         * Обновить билет по ID
         * @summary Обновить билет
         */
        async updateTicket(id: number, ticket: Ticket, options?: RawAxiosRequestConfig):
            Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTicket(id, ticket, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.updateTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) =>
                createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },

        /**
         * 
         * @summary Создать билет
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTicket(ticket: Ticket, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTicket(ticket, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.addTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Клонировать билет как VIP (цена ×2)
         * @param {CloneRequest} cloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneVip(cloneRequest: CloneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneVip(cloneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.cloneVip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Подсчёт билетов с comment лексикографически меньше данного
         * @param {string} comment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countCommentLess(comment: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countCommentLess(comment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.countCommentLess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Массовое удаление билетов по точному совпадению comment
         * @param {string} commentEq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByComment(commentEq: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByComment(commentEq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.deleteByComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTicket(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTicket(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.deleteTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.getTicketById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список билетов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTickets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.getTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Билет с минимальным ID события
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minEventTicket(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.minEventTicket(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.minEventTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Продать билет пользователю
         * @param {SellRequestDTO} sellRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellTicket(sellRequestDTO: SellRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellTicket(sellRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.sellTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Поток серверных событий об изменениях сущностей.
         * @summary Подписка на события (SSE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamTickets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.streamTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketsApi - factory interface
 * @export
 */
export const TicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketsApiFp(configuration)
    return {
        /**
         * Обновить билет по ID
         * @summary Обновить билет
         */
        updateTicket(id: number, ticket: Ticket, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.updateTicket(id, ticket, options).then((request) => request(axios, basePath));
        },



        /**
         * 
         * @summary Создать билет
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTicket(ticket: Ticket, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.addTicket(ticket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Клонировать билет как VIP (цена ×2)
         * @param {CloneRequest} cloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneVip(cloneRequest: CloneRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.cloneVip(cloneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Подсчёт билетов с comment лексикографически меньше данного
         * @param {string} comment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countCommentLess(comment: string, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.countCommentLess(comment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Массовое удаление билетов по точному совпадению comment
         * @param {string} commentEq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByComment(commentEq: string, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteByComment(commentEq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicket(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteTicket(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить билет по ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.getTicketById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список билетов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTickets(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.getTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Билет с минимальным ID события
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minEventTicket(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.minEventTicket(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Продать билет пользователю
         * @param {SellRequestDTO} sellRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellTicket(sellRequestDTO: SellRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.sellTicket(sellRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Поток серверных событий об изменениях сущностей.
         * @summary Подписка на события (SSE)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamTickets(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.streamTickets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export class TicketsApi extends BaseAPI {
    /**
     * Обновить билет по ID
     * @summary Обновить билет
     * @memberof TicketsApi
     */
    public updateTicket(id: number, ticket: Ticket, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).updateTicket(id, ticket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать билет
     * @param {Ticket} ticket 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public addTicket(ticket: Ticket, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).addTicket(ticket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Клонировать билет как VIP (цена ×2)
     * @param {CloneRequest} cloneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public cloneVip(cloneRequest: CloneRequest, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).cloneVip(cloneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Подсчёт билетов с comment лексикографически меньше данного
     * @param {string} comment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public countCommentLess(comment: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).countCommentLess(comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Массовое удаление билетов по точному совпадению comment
     * @param {string} commentEq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public deleteByComment(commentEq: string, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).deleteByComment(commentEq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить билет по ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public deleteTicket(id: number, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).deleteTicket(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить билет по ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public getTicketById(id: number, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).getTicketById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список билетов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public getTickets(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).getTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Билет с минимальным ID события
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public minEventTicket(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).minEventTicket(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Продать билет пользователю
     * @param {SellRequestDTO} sellRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public sellTicket(sellRequestDTO: SellRequestDTO, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).sellTicket(sellRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Поток серверных событий об изменениях сущностей.
     * @summary Подписка на события (SSE)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public streamTickets(options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).streamTickets(options).then((request) => request(this.axios, this.basePath));
    }
}

